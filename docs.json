{"language":"javascript","client_name":"inchjs","args":[],"client_version":"0.4.1","git_repo_url":"git@github.com:Topmarks/topmark-scrollspeed.git","branch_name":"master","objects":[{"comment":"/**\n*  Public: a frame utility that helps analyze frames returned from `devtools-timeline-model`\n*/","meta":{"range":[144,4089],"filename":"frames-util.js","lineno":5,"path":"/src","code":{"id":"astnode100000830","name":"module.exports","type":"ClassDeclaration"}},"classdesc":"Public: a frame utility that helps analyze frames returned from `devtools-timeline-model`","name":"exports","longname":"module.exports","kind":"class","memberof":"module","scope":"static"},{"comment":"/* eslint-disable no-underscore-dangle */\n/**\n*  Public: a frame utility that helps analyze frames returned from `devtools-timeline-model`\n*/","meta":{"range":[159,4089],"filename":"frames-util.js","lineno":5,"path":"/src","code":{"id":"astnode100000831","name":"FramesUtil","type":"ClassDeclaration","paramnames":["frames"]}},"undocumented":true,"name":"FramesUtil","longname":"FramesUtil","kind":"class","scope":"global"},{"comment":"/**\n*  Public: constructor\n*\n*  * `frames` an {Array} of frames from `devtools-timeline-model`\n*\n*  ## Example\n*\n*     const model = new DevtoolsTimelineModel(rawEvents);\n*     const frames = new FramesUtil(model.frameModel()._frames);\n*/","meta":{"range":[448,559],"filename":"frames-util.js","lineno":16,"path":"/src","code":{"id":"astnode100000834","name":"FramesUtil","type":"MethodDefinition","paramnames":["frames"]},"vars":{"":null}},"description":"Public: constructor\n\n * `frames` an {Array} of frames from `devtools-timeline-model`\n\n ## Example\n\n    const model = new DevtoolsTimelineModel(rawEvents);\n    const frames = new FramesUtil(model.frameModel()._frames);","name":"FramesUtil","longname":"FramesUtil","kind":"class","scope":"global"},{"comment":"/**\n*  Private: makes the frames a bit more readable.\n*\n*  * `frames` an {Array} of frames from `devtools-timeline-model`\n*\n*  ## Example\n*\n*     this.framesAnalysis = this._analyzeFrames(this.frames);\n*\n*  Returns an {Object} of results\n*/","meta":{"range":[835,1649],"filename":"frames-util.js","lineno":31,"path":"/src","code":{"id":"astnode100000857","name":"FramesUtil#_analyzeFrames","type":"MethodDefinition","paramnames":["frames"]},"vars":{"":null}},"description":"Private: makes the frames a bit more readable.\n\n * `frames` an {Array} of frames from `devtools-timeline-model`\n\n ## Example\n\n    this.framesAnalysis = this._analyzeFrames(this.frames);\n\n Returns an {Object} of results","name":"_analyzeFrames","longname":"FramesUtil#_analyzeFrames","kind":"function","memberof":"FramesUtil","scope":"instance"},{"comment":"/**\n*  Private: simpler helper function to round the large decimal floats\n*\n*  * `float` {Float} - the number to round.\n*  * `count` {Int} - the number of digits to keep after the decimal.\n*\n*  ## Example\n*\n*     this._roundDigits(1 / ((this.framesAnalysis.totalDuration / this.frames.length) / 1000));\n*\n*  Returns a {Float}\n*/","meta":{"range":[2016,2137],"filename":"frames-util.js","lineno":76,"path":"/src","code":{"id":"astnode100000979","name":"FramesUtil#_roundDigits","type":"MethodDefinition","paramnames":["float","count"]},"vars":{"":null}},"description":"Private: simpler helper function to round the large decimal floats\n\n * `float` {Float} - the number to round.\n * `count` {Int} - the number of digits to keep after the decimal.\n\n ## Example\n\n    this._roundDigits(1 / ((this.framesAnalysis.totalDuration / this.frames.length) / 1000));\n\n Returns a {Float}","name":"_roundDigits","longname":"FramesUtil#_roundDigits","kind":"function","memberof":"FramesUtil","scope":"instance"},{"comment":"/**\n*  Public: returns the average frame rate from the collection of frame lengths.\n*\n*  ## Example\n*\n*     const model = new DevtoolsTimelineModel(rawEvents);\n*     const frames = new FramesUtil(model.frameModel()._frames);\n*     console.log(frames.getAverageFrameRate());\n*\n*  Returns a {Float}\n*/","meta":{"range":[2472,2600],"filename":"frames-util.js","lineno":91,"path":"/src","code":{"id":"astnode100001006","name":"FramesUtil#getAverageFrameRate","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Public: returns the average frame rate from the collection of frame lengths.\n\n ## Example\n\n    const model = new DevtoolsTimelineModel(rawEvents);\n    const frames = new FramesUtil(model.frameModel()._frames);\n    console.log(frames.getAverageFrameRate());\n\n Returns a {Float}","name":"getAverageFrameRate","longname":"FramesUtil#getAverageFrameRate","kind":"function","memberof":"FramesUtil","scope":"instance"},{"comment":"/**\n*  Public: the total number of frames captured.\n*\n*  ## Example\n*\n*     const model = new DevtoolsTimelineModel(rawEvents);\n*     const frames = new FramesUtil(model.frameModel()._frames);\n*     console.log(frames.getTotalFrameCount());\n*\n*  Returns an {Int}\n*/","meta":{"range":[2901,2958],"filename":"frames-util.js","lineno":105,"path":"/src","code":{"id":"astnode100001030","name":"FramesUtil#getTotalFrameCount","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Public: the total number of frames captured.\n\n ## Example\n\n    const model = new DevtoolsTimelineModel(rawEvents);\n    const frames = new FramesUtil(model.frameModel()._frames);\n    console.log(frames.getTotalFrameCount());\n\n Returns an {Int}","name":"getTotalFrameCount","longname":"FramesUtil#getTotalFrameCount","kind":"function","memberof":"FramesUtil","scope":"instance"},{"comment":"/**\n*  Public: returns the total number of frames that lasted longer than 18ms\n*\n*  ## Example\n*\n*     const model = new DevtoolsTimelineModel(rawEvents);\n*     const frames = new FramesUtil(model.frameModel()._frames);\n*     console.log(frames.getTotalLargeFrameCount());\n*\n*  Returns an {Int}\n*/","meta":{"range":[3291,3373],"filename":"frames-util.js","lineno":119,"path":"/src","code":{"id":"astnode100001040","name":"FramesUtil#getTotalLargeFrameCount","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Public: returns the total number of frames that lasted longer than 18ms\n\n ## Example\n\n    const model = new DevtoolsTimelineModel(rawEvents);\n    const frames = new FramesUtil(model.frameModel()._frames);\n    console.log(frames.getTotalLargeFrameCount());\n\n Returns an {Int}","name":"getTotalLargeFrameCount","longname":"FramesUtil#getTotalLargeFrameCount","kind":"function","memberof":"FramesUtil","scope":"instance"},{"comment":"/**\n*  Public: Returns an object of frame breakdowns.\n*\n*  ## Example\n*\n*     const model = new DevtoolsTimelineModel(rawEvents);\n*     const frames = new FramesUtil(model.frameModel()._frames);\n*     console.log(frames.getBreakDownPercentage());\n*\n*  Returns an {Object} of frame breakdown percentages.\n*/","meta":{"range":[3715,4087],"filename":"frames-util.js","lineno":133,"path":"/src","code":{"id":"astnode100001052","name":"FramesUtil#getBreakDownPercentage","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Public: Returns an object of frame breakdowns.\n\n ## Example\n\n    const model = new DevtoolsTimelineModel(rawEvents);\n    const frames = new FramesUtil(model.frameModel()._frames);\n    console.log(frames.getBreakDownPercentage());\n\n Returns an {Object} of frame breakdown percentages.","name":"getBreakDownPercentage","longname":"FramesUtil#getBreakDownPercentage","kind":"function","memberof":"FramesUtil","scope":"instance"},{"comment":"","meta":{"range":[150,649],"filename":"scrollspeed.js","lineno":5,"path":"/src","code":{"id":"astnode100001127","name":"TRACE_CATEGORIES","type":"ArrayExpression","value":"[\"-*\",\"devtools.timeline\",\"disabled-by-default-devtools.timeline\",\"disabled-by-default-devtools.timeline.frame\",\"toplevel\",\"blink.console\",\"disabled-by-default-devtools.timeline.stack\",\"disabled-by-default-devtools.screenshot\",\"disabled-by-default-v8.cpu_profile\"]"}},"undocumented":true,"name":"TRACE_CATEGORIES","longname":"TRACE_CATEGORIES","kind":"constant","scope":"global"},{"comment":"/**\n*  Public: Topmarks plugin that simulates scrolling and captures performance\n*\n*  * `app` An {Object} representing the app that registers the plugin\n*  * `options` An {Object} of options specific to this plugin (or from defaults)\n*\n*  ## Example\n*\n*     const topmarks = new Topmarks({scrollspeed: {url: 'http://topcoat.io'}})\n*     topmarks.register('topmark-scrollspeed')\n*     .then(() => {\n*       console.log(topmarks.results);\n*     });\n*\n*  Returns a {Promise} when finished.\n*/","meta":{"range":[1163,3257],"filename":"scrollspeed.js","lineno":31,"path":"/src","code":{"id":"astnode100001140","name":"scrollspeed","type":"ArrowFunctionExpression"},"vars":{"chrome":"scrollspeed~chrome","rawEvents":"scrollspeed~rawEvents","scrollHeight":"scrollspeed~scrollHeight","chromeHelper":"scrollspeed~chromeHelper","":null}},"description":"Public: Topmarks plugin that simulates scrolling and captures performance\n\n * `app` An {Object} representing the app that registers the plugin\n * `options` An {Object} of options specific to this plugin (or from defaults)\n\n ## Example\n\n    const topmarks = new Topmarks({scrollspeed: {url: 'http://topcoat.io'}})\n    topmarks.register('topmark-scrollspeed')\n    .then(() => {\n      console.log(topmarks.results);\n    });\n\n Returns a {Promise} when finished.","name":"scrollspeed","longname":"scrollspeed","kind":"function","scope":"global"}]}